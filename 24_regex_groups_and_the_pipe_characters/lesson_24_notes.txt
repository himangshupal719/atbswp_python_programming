Grouping with Parentheses:

Adding parentheses will create groups in the regex: (\d\d\d)-(\d\d\d-\d\d\d\d).
Then you can use the group() match object method to grab the matching text from just one group.

The first set of parentheses in a regex string will be group 1. The second set will be group 2. By passing the integer 1 or 2 to the group() match object method, you can grab different parts of the matched text.
Passing 0 or nothing to the group() method will return the entire matched text. 

>>> import re
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> phoneNumRegex.search('My number is 415-555-4242')
<re.Match object; span=(13, 25), match='415-555-4242'>
>>> mo = phoneNumRegex.search('My number is 415-555-4242')
>>> mo.group()
'415-555-4242'
>>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My number is 415-555-4242')
>>> mo
<re.Match object; span=(13, 25), match='415-555-4242'>
>>> mo.group()
'415-555-4242'
>>> mo.group(1)
'415'
>>> mo.group(2)
'555-4242'

If you would like to retrieve all the groups at once, use the groups() method

>>> mo.groups()
('415', '555-4242')

Since mo.groups() returns a tuple of multiple values, you can use the multiple-assignment trick to assign each value to a separate variable, as in the previous areaCode, mainNumber = mo.groups() line.

>>> areaCode, mainNumber = mo.groups()
>>> print(areaCode)
415
>>> print(mainNumber)
555-4242
>>> 


Parentheses have a special meaning in regular expressions, but what do you do if you need to match a parenthesis in your text? For instance, maybe the phone numbers you are trying to match have the area code set in parentheses.
In this case, you need to escape the ( and ) characters with a backslash.

>>> phoneNumRegex = re.compile(r'(\(\d\d\d\)) (\d\d\d-\d\d\d\d)')
>>> mo = phoneNumRegex.search('My number is (551) 242-7383.')
>>> mo
<re.Match object; span=(13, 27), match='(551) 242-7383'>
>>> mo.group()
'(551) 242-7383'
>>> mo.groups()
('(551)', '242-7383')
>>> mo.group(1)
'(551)'
>>> mo.group(2)
'242-7383'
>>> mo.group(0)
'(551) 242-7383'
>>> 

The \( and \) escape characters in the raw string passed to re.compile() will match actual parenthesis characters. In regular expressions, the following characters have special meanings:
.  ^  $  *  +  ?  {  }  [  ]  \  |  (  )

If you want to detect these characters as part of your text pattern, you need to escape them with a backslash:
\.  \^  \$  \*  \+  \?  \{  \}  \[  \]  \\  \|  \(  \)


Make sure to double-check that you haven’t mistaken escaped parentheses \( and \) for parentheses ( and ) in a regular expression. If you receive an error message about “missing )” or “unbalanced parenthesis,” you may have forgotten to include the closing unescaped parenthesis for a group, like in this example:

>>> re.compile(r'(\(Parentheses\))')
re.compile('(\\(Parentheses\\))')
>>> 
>>> re.compile(r'(\(Parentheses\)')
Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    re.compile(r'(\(Parentheses\)')
  File "C:\Python38\lib\re.py", line 252, in compile
    return _compile(pattern, flags)
  File "C:\Python38\lib\re.py", line 304, in _compile
    p = sre_compile.compile(pattern, flags)
  File "C:\Python38\lib\sre_compile.py", line 764, in compile
    p = sre_parse.parse(p, flags)
  File "C:\Python38\lib\sre_parse.py", line 948, in parse
    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)
  File "C:\Python38\lib\sre_parse.py", line 443, in _parse_sub
    itemsappend(_parse(source, state, verbose, nested + 1,
  File "C:\Python38\lib\sre_parse.py", line 836, in _parse
    raise source.error("missing ), unterminated subpattern",
re.error: missing ), unterminated subpattern at position 0

Matching Multiple Groups with the Pipe
-----------------------------------------
You can use pipe(|) anywhere you want to match one of many expressions.

For example, the regulat expression r'Batman | Tina Fey' will match either 'Batman' or 'Tina Fey'.

When both Batman and Tina Fey occur in the searched string, the first occurrence of matching text will be returned as the Match object. 

>>> heroRegex = re.compile(r'Batman|Tina Fey')
>>> mo1 = heroRegex.search('Batman and Tina Fey')
>>> mo1.group()
'Batman'
>>> mo2 = heroRegex.search('Tina Fey and Batman')
>>> mo2.group()
'Tina Fey'

You can find all matching occurrences with the findall() method.

>>> heroRegex.findall('Batman and Tina Fey')
['Batman', 'Tina Fey']

You can also use the pipe to match one of several patterns as part of your regex. For example, say you wanted to match any of the strings 'Batman', 'Batmobile', 'Batcopter', and 'Batbat'. Since all these strings start with Bat, it would be nice if you could specify that prefix only once. 

>>> batRegex = re.compile(r'Bat(man|mobile|copter|bat)')
>>> mo = batRegex.search('Batmobile lost a wheel.')
>>> mo.group()
'Batmobile'
>>> mo.group(1)
'mobile'
>>> mo1.group()
'Batman'
>>> mo1.groups()
('man',)
>>> batRegex.findall('Batman is Batman but Robin is not Batman. Robin has a Batcopter.')
['man', 'man', 'man', 'copter']

The method call mo.group() returns the full matched text 'Batmobile', while mo.group(1) returns just the part of the matched text inside the first parentheses group, 'mobile'.

By using the pipe character and grouping parentheses, you can specify several alternative patterns you would like your regex to match.

If you need to match an actual pipe character, escape it with a backslash, like \|.
