egular expressions are helpful, but few non-programmers know about them even though most modern text editors and word processors, such as Microsoft Word or OpenOffice, have find and find-and-replace features that can search based on regular expressions. Regular expressions are huge time-savers, not just for software users but also for programmers.

Regular expressions, called regexes for short, are descriptions for a pattern of text.For example, a \d in a regex stands for a digit character—that is, any single numeral from 0 to 9.

The regex \d\d\d-\d\d\d-\d\d\d\d is used by Python to match the same text pattern the previous isPhoneNumber() function did: a string of three numbers, a hyphen, three more numbers, another hyphen, and four numbers.

But regular expressions can be much more sophisticated. For example, adding a 3 in braces ({3}) after a pattern is like saying, “Match this pattern three times.” So the slightly shorter regex \d{3}-\d{3}-\d{4} also matches the correct phone number format.

- Creating Regex Object
All the regex functions in Python are in the re module.

>>> import re

Passing a string value representing your regular expression to re.compile() returns a Regex pattern object (or simply, a Regex object).

To create a Regex object that matches the phone number pattern, enter the following into the interactive shell. (Remember that \d means “a digit character” and \d\d\d-\d\d\d-\d\d\d\d is the regular expression for a phone number pattern.)

>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')

Now the phoneNumRegex variable contains a Regex object.

- Matching REgex Object
A Regex object’s search() method searches the string it is passed for any matches to the regex. 
The search() method will return None if the regex pattern is not found in the string.
If the pattern is found, the search() method returns a Match object, which have a group() method that will return the actual matched text from the searched string. 

>>> import re
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> phoneNumRegex
re.compile('\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d')
>>> mo = phoneNumRegex.search('Mu number is 415-333-1234.')
>>> mo
<re.Match object; span=(13, 25), match='415-333-1234'>
>>> print('Phone number found: ' + mo.group())
Phone number found: 415-333-1234
>>> 


Review of Regular Expression Matching

1. Import the regex module with import re.
2. Create a Regex object with the re.compile() function. (Remember to use a raw string.)
3. Pass the string you want to search into the Regex object’s search() method. This returns a Match object.
4. Call the Match object’s group() method to return a string of the actual matched text.

show you exactly how a regex matches a piece of text that you enter. I recommend the tester at https://pythex.org/.