Substituting Strings With The sub() Method
----------------------------------------------

Regular expressions can not only find text patterns but can also substitute new text in place of those patterns. The sub() method for Regex objects is passed two arguments. The first argument is a string to replace any matches. The second is the string for the regular expression. The sub() method returns a string with the substitutions applied.

>>> nameRegex = re.compile(r'Agent \w+')
>>> nameRegex.findall('Agent Alice gave the secret documents to Agent Bob.')
['Agent Alice', 'Agent Bob']
>>> nameRegex.sub('REDACTED', 'Agent Alice gave the secret documents to Agent Bob.')
'REDACTED gave the secret documents to REDACTED.'

Sometimes you may need to use the matched text itself as part of the substitution. In the first argument to sub(), you can type \1, \2, \3, and so on, to mean “Enter the text of group 1, 2, 3, and so on, in the substitution.”


For example, say you want to censor the names of the secret agents by showing just the first letters of their names. To do this, you could use the regex Agent (\w)\w* and pass r'\1****' as the first argument to sub(). The \1 in that string will be replaced by whatever text was matched by group 1—that is, the (\w) group of the regular expression.


>>> nameRegex = re.compile(r'Agent (\w)\w*')
>>> nameRegex.findall('Agent Alice gave the secret documents to Agent Bob.')
['A', 'B']
>>> nameRegex.sub(r'Agent \1****', 'Agent Alice gave the secret documents to Agent Bob.')
'Agent A**** gave the secret documents to Agent B****.'



Managing Complex Regexes
--------------------------

Regular expressions are fine if the text pattern you need to match is simple. But matching complicated text patterns might require long, convoluted regular expressions. You can mitigate this by telling the re.compile() function to ignore whitespace and comments inside the regular expression string. This “verbose mode” can be enabled by passing the variable re.VERBOSE as the second argument to re.compile().

>>> phoneRegex = re.compile(r'((\d{3}|(\d{3}\))?(\s|-|\.)?\d{3}(\s|-|\.)\d{4}(\s*(ext|x|ext.)\s*\d{2,5})?)')

The above can be rewritten with comments and spread accross multiple line for better readability. 

>>> phoneRegex = re.compile(r'''(
(\d{3}|(\d{3}\))?  #area code
(\s|-|\.)?           #separator
\d{3}               #first 3 digits
(\s|-|\.)            #separator
\d{4}             $last 4 digits
(\s*(ext|x|ext.)\s*\d{2,5})?   #extension
)''', re.VERBOSE)

Note how the previous example uses the triple-quote syntax (''') to create a multiline string so that you can spread the regular expression definition over many lines, making it much more legible.

Combining re.IGNORECASE, re.DOTALL, and re.VERBOSE
---------------------------------------------------
What if you want to use re.VERBOSE to write comments in your regular expression but also want to use re.IGNORECASE to ignore capitalization? Unfortunately, the re.compile() function takes only a single value as its second argument. You can get around this limitation by combining the re.IGNORECASE, re.DOTALL, and re.VERBOSE variables using the pipe character (|), which in this context is known as the bitwise or operator.

>>> someRefexValue = re.compile('foo', re.IGNORECASE|re.DOTALL)
>>> someRefexValue.search('Why do we use foo in programming language?')
<re.Match object; span=(14, 17), match='foo'>

>>> someRefexValue = re.compile('foo', re.IGNORECASE|re.DOTALL|re.VERBOSE)

