- Useful String Methods
upper()
lower() 
isupper()
islower()

upper() and lower() -->  
-- Return new string where all the letters in the original string have converted to uppercase or lowercase, respectively. 
-- Nonletter characters in the string remain unchanged. 

>>> spam = 'Hello, world!'
>>> spam = spam.upper()
>>> spam
'HELLO, WORLD!'
>>> spam = spam.lower()
>>> spam
'hello, world!'


-- Note that these methods do not change the string itself but return new string values. If you want to change the original string, you have to call upper() or lower() on the string and then assign the new string to the variable where the original was stored. This is why you must use spam = spam.upper() to change the string in spam instead of simply spam.upper().

-- The upper() and lower() methods are helpful if you need to make a case-insensitive comparison.  For example, the strings 'great' and 'GREat' are not equal to each other. But in the following small program, it does not matter whether the user types Great, GREAT, or grEAT, because the string is first converted to lowercase.

Adding code to your program to handle variations or mistakes in user input, such as inconsistent capitalization, will make your programs easier to use and less likely to fail.

-- The isupper() and islower() methods will return a Boolean True value if the string has at least one letter and all the letters are uppercase or lowercase, respectively. Otherwise, the method returns False.

>>> spam = 'Hello, world!'
>>> spam.islower()
False
>>> spam.isupper()
False
>>> 'HELLO'.islower()
False
>>> 'HELLO'.isupper()
True
>>> '12345'.isupper()
False
>>> '12345'.islower()
False


-- Since the upper() and lower() string methods themselves return strings, you can call string methods on those returned string values as well. Expressions that do this will look like a chain of method calls. 

>> 'HELLO'.upper()
'HELLO'
>>> 'Hello'.upper().lower()
'hello'
>>> 'HELLO'.lower()
'hello'
>>> 'HELLO'.lower().upper()
'HELLO'

- isX() Methods - isalpha(), isalnum(), isdecimal(), isspace(), istitle()

-- isalpha() --> Returns True if the string consists only of letters and isn't blank. 

>>> 'Hello'.isalpha()
True
>>> 'hello123'.isalpha()
False
>>> 

-- isalnum() --> Returns True if the string consists only of letters and numbers and is not blank

>>> 'hello'.isalnum()
True
>>> "".isalnum()
False
>>> 'Hello123'.isalnum()
True

-- isdecimal() --> Returns True if the string consists only of numeric characters and is not blank

>>> 'Hello123'.isdecimal()
False
>>> '123'.isdecimal()
True
>>> 123.45.isdecimal()
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    123.45.isdecimal()
AttributeError: 'float' object has no attribute 'isdecimal'
>>> '123.45'.isdecimal()
False

-- isspace() --> Returns True if the string consists of only one spaces, tabs, and newlines and is not blank

>>> ' '.isspace()
True

>>> '\n'.isspace()
True
>>> '\t'.isspace()
True
>>> 'H     ello'.isspace()
False
>>> 

-- istitle() --> Returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters

>>> 'Hello'.istitle()
True
>>> 'HELLO'.istitle()
False
>>> 'This Is Title Case 123'.istitle()
True
>>> 'This Is not Title Case'.istitle()
False
>>> 

-- Calling isdecimal() and isalnum() on variables, we’re able to test whether the values stored in those variables are decimal or not, alphanumeric or not.

- startswith() and endswith() Methods

--  return True if the string value they are called on begins or ends (respectively) with the string passed to the method; otherwise, they return False.

>>> 'Hello, world!'.startswith('Hello')
True
>>> 'Hello, world!'.endswith('!')
True
>>> 'abc123'.startswith('abcdef')
False
>>> 'abc123'.endswith('12')
False
>>> 'Hello, world!'.startswith('HELLO')
False
>>> 'Hello, world!'.endswith('Hello, world!')
True
>>> 'Hello, world!'.startswith('Hello, world')
True
>>> 

-- These methods are useful alternatives to the == equals operator if you need to check only whether the first or last part of the string, rather than the whole thing, is equal to another string.

- The join() and split() Methods

-- The join() method is useful when you have a list of strings that need to be joined together into a single string value. The join() method is called on a string, gets passed a list of strings, and returns a string. The returned string is the concatenation of each string in the passed-in list.

>>> ','.join(['cats','rats','bats'])
'cats,rats,bats'
>>> '-'.join(['cats','rats','bats'])
'cats-rats-bats'
>>> ' '.join(['My','name','is','Himangshu'])
'My name is Himangshu'
>>> 'ABC'.join(['My','name','is','Himangshu'])
'MyABCnameABCisABCHimangshu'
>>> 

-- Notice that the string join() calls on is inserted between each string of the list argument. Remember that join() 
is called on a string value and is passed a list value. 

-- split() method is called on a string value and returns a list of strings. 

>>> 'My name is Himangshu'.split(' ')
['My', 'name', 'is', 'Himangshu']
>>> 'cats,rats,dogs'.split(',')
['cats', 'rats', 'dogs']
>>> 'MyABCnameABCisABCHimangshu'.split('ABC')
['My', 'name', 'is', 'Himangshu']
>>> 'My name is Himangshu'.split('m')
['My na', 'e is Hi', 'angshu']
>>> 

-- A common use of split() is to split a multiline string along the newline characters. 

>>> spam = '''Dear Alice,
How have you been? I am fine.
There is a container in the fridge
that is labeled "Milk Experiment."

Please do not drink it.
Sincerely,
Bob'''
>>> spam.split('\n')
['Dear Alice,', 'How have you been? I am fine.', 'There is a container in the fridge', 'that is labeled "Milk Experiment."', '', 'Please do not drink it.', 'Sincerely,', 'Bob']


-- Passing split() the argument '\n' lets us split the multiline string stored in spam along the newlines and return a list in which each item corresponds to one line of the string.

- Splitting Strings with the partition() Method

-- The partition() string method can split a string into the text before and after a separator string. This method searches the string it is called on for the separator string it is passed, and returns a tuple of three substrings for the “before,” “separator,” and “after” substrings. 

>>> 'Hello, world!'.partition('w')
('Hello, ', 'w', 'orld!')
>>> 'Hello, world!'.partition('world')
('Hello, ', 'world', '!')

-- If the separator string you pass to partition() occurs multiple times in the string that partition() calls on, the method splits the string only on the first occurrence.

>>> 'Hello, world!'.partition('o')
('Hell', 'o', ', world!')

-- If the separator string can’t be found, the first string returned in the tuple will be the entire string, and the other two strings will be empty.

>>> 'Hello, world!'.partition('i')
('Hello, world!', '', '')

-- Multiple assignment trick can be used to assign the three returned strings to three variables.

>>> before, sep, after = 'Hello, world!'.partition(',')
>>> before
'Hello'
>>> sep
','
>>> after
' world!'
>>> 

-- The partition() method is useful for splitting a string whenever you need the parts before, including, and after a particular separator string.

- Justifying Text with the rjust(), ljust() and center() Methods

-- The rjust() and ljust() string methods return a padded version of the string they are called on, with spaces inserted to justify the text. The first argument to both methods is an integer length for the justified string.

>>> 'Hello'.rjust(10)
'     Hello'
>>> 'Hello'.ljust(10)
'Hello     '
>>> 'Hello, World'.rjust(20)
'        Hello, World'
>>> 'Hello, world'.ljust(20)
'Hello, world        '
>>> 

-- 'Hello'.rjust(10) says that we want to right-justify 'Hello' in a string of total length 10. 'Hello' is five characters, so five spaces will be added to its left, giving us a string of 10 characters with 'Hello' justified right.

-- An optional second argument to rjust() and ljust() will specify a fill character other than a space character. 

>>> 'Hello'.rjust(20, '*')
'***************Hello'
>>> 'Hello'.ljust(20,'*')
'Hello***************'
>>> 

-- The center() string method works like ljust() and rjust() but centers the text rather than justifying it to the left or right.

>>> 'Hello'.center(20)
'       Hello        '
>>> 'Hello'.center(20, '=')
'=======Hello========'
>>> 

-- These methods are especially useful when you need to print tabular data that has correct spacing. 

-- Using rjust(), ljust(), and center() lets you ensure that strings are neatly aligned, even if you aren’t sure how many characters long your strings are.

- Removing White Space with the strip(), rstrip(), and lstrip() Methods

-- Sometimes you may want to strip off whitespace characters (space, tab, and newline) from the left side, right side, or both sides of a string.
  
-- strip() --> The strip() method will return a new string without any whitespace characters at the begening or end. 

-- lstrip(), rstrip() --> The lstrip() and rstrip() methods will remove whitespaces characters from the left and right ends, respectively. 

>>> spam = '        Hello, World      '
>>> spam
'        Hello, World      '
>>> spam.strip()
'Hello, World'
>>> spam.lstrip()
'Hello, World      '
>>> spam.rstrip()
'        Hello, World'
>>> 


-- Optionally, a string argument will specify which characters on the ends should be stripped.

>>> spam
'SpamSpamBaconSpamEggsSpamSpam'
>>> spam.strip('Spam')
'BaconSpamEggs'
>>> spam.strip('mSap')
'BaconSpamEggs'
 
-- Passing strip() the argument 'ampS' will tell it to strip occurrences of a, m, p, and capital S from the ends of the string stored in spam. The order of the characters in the string passed to strip() does not matter: strip('ampS') will do the same thing as strip('mapS') or strip('Spam').

- Numeric Values of Characters With The ord() and chr() functions

You can use the ord() function to get the code point of a one-character string, and the chr() function to get the one-character string of an integer code point

>>> ord('A')
65

>>> chr(65)
'A'

>>> ord('.')
46
>>> chr(46)
'.'

-- These functions are useful when you need to do an ordering or mathematical operation on characters

>>> chr(ord('A'))
'A'
>>> chr(ord('A')+1)
'B'

- Copying and Pasting Strings With The pyperclip Module
The pyperclip module has copy() and paste() functions that can send text to and receive text from your computer's clipboard. Sending the output of your program to the clipboard will make it easy to paste it into an email, word, processor or some other software.

-- The pyperclip module does not come with Python. 
pip install --user pyperclip --> install pyperclip
python -m pip install pip upgrade --> upgrade pip

>>> import pyperclip
>>> pyperclip.copy('Hello, world!')
>>> pyperclip.paste()
'Hello, world!'
>>> 

-- Of course, if something outside of your program changes the clipboard contents, the paste() function will return it. 

>>> pyperclip.paste()
'For example, if I copied this sentence to the clipboard and then called paste(), it would look like this:'