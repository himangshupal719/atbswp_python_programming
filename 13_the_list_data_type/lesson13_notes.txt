- A list is a value that contains multiple values in an ordered sequence. 
  List is a value that can be stored in a variable or passed to a function like any other value.

- A list begins with an opening square bracket and ends with a closing square bracket, [].

- Values inside the list are also called items. Items are separated with commas (that is, they are comma-delimited).
comma-delimnitted.   

 >>> [1, 2, 3]

spam = ['cat', 'bat',' rat', 'elephant']

- Getting Individual Values in a List with Indexes: 
 Indexs to access the items. The integer inside the square brackets that follows the list is called an index.
 The first value in the list is at index 0, the second value is at index 1, the third value is at index 2, and so  on.

spam[0]  -> First item

The above evaluates like this - 

spam[0]
['cat', 'bat',' rat', 'elephant'][0] 
'cat'

spam[1]
['cat', 'bat',' rat', 'elephant'][1]
'bat'

spam[int(1.0)]
'bat'

- List can contain other lists.List of lists. The values in these lists of lists can be accessed using multiple indexes.

spam = [['cat', 'bat'], [10, 20, 30, 40, 50]]
spam[0] = ['cat', 'bat']
spma[0][1] = 'bat'

spam[1] = [10, 20, 30, 40, 50]
spam[1][4] = 50

The first index dictates which list value to use, and the second indicates the value within the list value. 

 - Negative index = Starts at end and go backwards. The integer value -1 refers to the last index in a list, the value -2 refers to the second-to-last index in a list, and so on.

spam = ['cat', 'bat',' rat', 'elephant']
spam[-1] = 'elephant'
spam[-2] = 'rat'

'The' + spam[-1] + 'is afraid of the ' + spam[-3] + '.'

- Slice: Gets several values from the list. A slice is typed between square brackets, like an index, but it has two integers separated by a colon.

In a slice, the first integer is the index where the slice starts. The second integer is the index where the slice ends. A slice goes up to, but will not include, the value at the second index. 

--> spam[2] is a list with an index (one integer).
--> spam[1:4] is a list with a slice (two integers).

spam[1:3]
['bat', 'rat']

index = Evaluates to a single item in a list
Slice = Evaluates to a list

Changing a list item: 
spam = [10, 20, 30]
spam[1] = 'Hello'
spam 
[10, 'Hello', 30]

spam = spam = [10, 20, 30]
spam[1:3] = ['CAT', 'DOG', 'MOUSE']
>>> spam
[10, 'CAT', 'DOG', 'MOUSE']

>>> spam[0:-1]
['cat', 'bat', 'rat']

>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam
['cat', 'bat', 'rat', 'elephant']
>>> spam[0:-1]
['cat', 'bat', 'rat']
>>> spam[-1:-3]
[]
>>> spam[-3:-1]
['bat', 'rat']
>>> spam[-1:2]
[]
>>> spam[2:-1]
['rat']
>>> spam[1:-1]
['bat', 'rat']
>>> 

- Slice Shortcut:
As a shortcut, you can leave out one or both of the indexes on either side of the colon in the slice. Leaving out the first index is the same as using 0, or the beginning of the list. Leaving out the second index is the same as using the length of the list, which will slice to the end of the list. 

>>> spam
['cat', 'bat', 'rat', 'elephant']
>>> spam[:2]
['cat', 'bat']
>>> spam[1:]
['bat', 'rat', 'elephant']
>>> spam[:]
['cat', 'bat', 'rat', 'elephant']

- Removing values from a list with 'del' statement. 
The del statement will delete values at an index in a list. All of the values in the list after the deleted value will be moved up one index.
>>> spam = ['cat', 'bat', 'rat',' elephant']
>>> del spam[2]
>>> spam
['cat', 'bat', ' elephant']
>>> del spam[2]
>>> spam
['cat', 'bat']

del statement = The del statement can also be used on a simple variable to delete it, as if it were an “unassignment” statement.

>>> del spam
>>> spam
Traceback (most recent call last):
  File "<pyshell#81>", line 1, in <module>
    spam
NameError: name 'spam' is not defined

- len statement: The len() function will return the number of values that are in a list value passed to it.
>>> len(spam)
2
>>> len([1,2,3])
3

- Changing Values in a List with Indexes

>>> spam[:]
['cat', 'bat', 'rat', 'elephant']
>>> spam
['cat', 'bat', 'rat', 'elephant']
>>> spam[1] = 'aardvark'
>>> spam
['cat', 'aardvark', 'rat', 'elephant']
>>> spam[2] = spam[1]
>>> spam
['cat', 'aardvark', 'aardvark', 'elephant']
>>> spam[-1] = 12345
>>> spam
['cat', 'aardvark', 'aardvark', 12345]



- List concatenation: The + operator can combine two lists to create a new list value.
>>> [1,2,3] + [4,5,6]
[1, 2, 3, 4, 5, 6]
>>> [1,2,3] + ['A', 'B', 'C']
[1, 2, 3, 'A', 'B', 'C']
>>> spam = [1,2,3]
>>> spam
[1, 2, 3]
>>> spam = spam + ['A', 'B', 'C']
>>> spam
[1, 2, 3, 'A', 'B', 'C']

- List replication: The * operator can also be used with a list and an integer value to replicate the list.
>>> [1,2,3]*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
>>> ['X', 'Y', 'Z'] * 3
['X', 'Y', 'Z', 'X', 'Y', 'Z', 'X', 'Y', 'Z']

list() function
>>> list('Hello')
['H', 'e', 'l', 'l', 'o']

The in and not in operator
>>> 'howdy' in ['hello','hi','howdy','heyas']
True
>>> 42 in ['hello','hi','howdy','heyas']
False
>>> 42 not in ['hello','hi','howdy','heyas']
