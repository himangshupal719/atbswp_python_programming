Functions - 
print()
input()
len()

Function is like a mini program within a program. 
We can write our own functions. Function got codes that executes when function is called. 

def statement defines a function. It does not execute the code inside of it. Code in the block that follows the def statement is the body of the function.   

Functionm call - function name followed by parentheses e.g. function_name()

Funtion gropus code that execute multiple times. 

De-duplication - which means getting rid of duplicated or copy-and-pasted code. Deduplication makes your programs shorter, easier to read, and easier to update.
A major purpose of functions is to group code that gets executed multiple times.

Argument: Values passed in the function call.
Parameter: Variable inside the function.

Parameters are variables that contain arguments. When a function is called with arguments, the arguments are stored in the parameters.

def hello(name):
	print('Hello, ' + name)

hello('Bob')

name = parameter
Bob = Argument

One special thing to note about parameters is that the value stored in a parameter is forgotten when the function returns.

def sayHello(name):
       print('Hello, ' + name)
sayHello('Al')

- Define a function is to create it. The def statement defines the sayHello() function.
- The sayHello('Al') line calls the now-created function, sending the execution to the top of the functionâ€™s code. 
- This function call is also known as passing the string value 'Al' to the function.
- A value being passed to a function in a function call is an argument. 
- The argument 'Al' is assigned to a local variable named name. Variables that have arguments assigned to them are   parameters.

Return statement: Value returned by the function call. The value that a function call evaluates to is called the return value of the function

print('hello') --> hello 
print does not return a string. It does not return string. It displays the string as side effect.
Print returns special value 'None'.

None - None type data type. 
In interractive shell, None does not show up if we enter it.
In Python, there is a value called None, which represents the absence of a value. The None value is the only value of the NoneType data type. (Other programming languages might call this value null, nil, or undefined.) Just like the Boolean True and False values, None must be typed with a capital N.

>>> spam = print()

>>> spam
>>> spam == None
True

Every function call has a return value. If a function does not have a return statement, the return value defaults to the None.

Keyword arguments - Optional arguments to pass to a function call. 
print() function automatically adds new line 

print('Hello')
print('World')

>>> Hello
>>> World

print('Hello', end = '')  #end is the keyword argument. 
print('World')

>>> HelloWorld

print automatically seperate the strings when multiple strings passed to a single print() function. 
>>> print('cat','dog','mouse')
cat dog mouse

>>> print('cat','dog','mouse', sep='ABC')
catABCdogABCmouse

Keyword arguments are optional. 

** expressions are composed of values and operators. A function call can be used in an expression because the call evaluates to its return value

** Behind the scenes, Python adds return None to the end of any function definition with no return statement. This is similar to how a while or for loop implicitly ends with a continue statement. Also, if you use a return statement without a value (that is, just the return keyword by itself), then None is returned.


The call stack - is how Python remembers where to return the execution after each functin call. The call stack is not stored in a variable in the program; rather Python handles it behind the scenes. When a program calls a function, Python creates a frame object on top of the call stack. Frame objects store the function call so that Python can remember where to return. If another function call is made, Python puts another frame object on the call stack above the other one. When a function call returns, Python removes a frame object from the top of the stack and moves the execution to the line number stored in it. Note that frame objects are always added and removed from the top of the stack and not from any other place.
 
