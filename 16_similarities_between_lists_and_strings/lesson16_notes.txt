String and lists are similiar if we consider string to be a list of single character strings. 

Many of the things that we can do wit hlist can also be done with string. 

>>> list('Hello')
['H', 'e', 'l', 'l', 'o']
>>> name = 'Zophie'
>>> name[0]
'Z'
>>> name[1:3]
'op'
>>> name[-2]
'i'
>>> 'Zo' in name
True
>>> 'zzz' in name
False

>>> for letter in name:
	print(letter)

	
Z
o
p
h
i
e

- List value is a Mutable data type (can be changed) where String value are immutable data type (can not be changed).
 
>>> name = 'Zophie the cat'
>>> name[7]
't'
>>> name[7] = 'i'
Traceback (most recent call last):
  File "<pyshell#153>", line 1, in <module>
    name[7] = 'i'
TypeError: 'str' object does not support item assignment

Proper way to modify a string is to use slicing to create a new string. 

>>> name = 'Zophie the cat'
>>> newName = name[0:7] + 'a' + name[10:]
>>> newName
'Zophie a cat'

Mutable and immutable data type
references
copy.deepcopy()

Line continuation character: \



** Reference - Facts and myths about Python names and values - Youtube video

------------------------------------------------------------------------------------------------------------------
- Sequence Data Type:
	The Python sequence data types include lists, strings, range objects returned by range(), and tuples. 
	Strings and lists are actually similar if you consider a string to be a “list” of single text characters.
	Many of the things you can do with lists can also be done with strings and other values of sequence types: indexing; slicing; and using them with for loops, with len(), and with the in and not in operators.

>>> list('Hello')
['H', 'e', 'l', 'l', 'o']
>>> name = 'Zophie'
>>> name[0]
'Z'
>>> name[1:3]
'op'
>>> name[-2]
'i'
>>> 'Zo' in name
True
>>> 'zzz' in name
False

>>> for letter in name:
	print(letter)

	
Z
o
p
h
i
e

------------------------------------------------------------------------------------------------------------------
- Mutable and Immutable Data Types
A list value is a mutable data type: it can have values added, removed, or changed.
A string is immutable: it cannot be changed. Trying to reassign a single character in a string results in a TypeError error.

>>> name = 'Zophie a cat'
>>> name[7]
'a'
>>> name[7] = 'X'
Traceback (most recent call last):
  File "<pyshell#180>", line 1, in <module>
    name[7] = 'X'
TypeError: 'str' object does not support item assignment

The proper way to “mutate” a string is to use slicing and concatenation to build a new string by copying from parts of the old string.

>>> name
'Zophie a cat'
>>> newName = name[0:7] + 'the' + name[8:]
>>> newName
'Zophie the cat'
>>> name
'Zophie a cat'

Original string was not changed because strings are immutable. 

A list value is mutable. 

>>> eggs = [1,2,3]
>>> eggs = [4,5,6
	]
>>> eggs
[4, 5, 6]
>>> 

The list value in eggs isn’t being changed here; rather, an entirely new and different list value ([4, 5, 6]) is overwriting the old list value ([1, 2, 3]). When eggs = [4, 5, 6] is executed, the contents of eggs are replaced with a new list value.

>>> eggs = [1,2,3]
>>> del eggs[2]
>>> del eggs[1]
>>> del eggs[0]
>>> eggs
[]
>>> eggs.append(4)
>>> eggs.append(5)
>>> eggs.append(6)
>>> eggs
[4, 5, 6]

The del statement and the append() method modify the same list value in place.

References: 
Variables “store” strings and integer values. However, this explanation is a simplification of what Python is actually doing. Technically, variables are storing references to the computer memory locations where the values are stored.

>>> spam = 42
>>> cheese = spam
>>> spam = 100
>>> spam
100
>>> cheese
42

When you assign 42 to the spam variable, you are actually creating the 42 value in the computer’s memory and storing a reference to it in the spam variable. When you copy the value in spam and assign it to the variable cheese, you are actually copying the reference. Both the spam and cheese variables refer to the 42 value in the computer’s memory. When you later change the value in spam to 100, you’re creating a new 100 value and storing a reference to it in spam. This doesn’t affect the value in cheese. 

Integers are immutable values that don’t change; changing the spam variable is actually making it refer to a completely different value in memory.

>>> spam = [0, 1, 2, 3, 4, 5]
>>> cheese = spam # The reference is being copied, not the list.
>>> cheese[1] = 'Hello'
>>> spam
[0, 'Hello', 2, 3, 4, 5]
>>> cheese
[0, 'Hello', 2, 3, 4, 5]
>>> 

When you create the list, you assign a reference to it in the spam variable. But the next line copies only the list reference in spam to cheese, not the list value itself. There is only one underlying list because the list itself was never actually copied. So when you modify the first element of cheese you are modifying the same list that spam refers to. 

