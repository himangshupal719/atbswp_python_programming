enumerate() function with lists:
- Instead of using the range(len(someList)) technique with a for loop to obtain the integer index of the items in the list, you can call the enumerate() function instead.
- On each iteration of the loop, enumerate() will return two values: the index of the item in the list, and the item in the list itself.

The enumerate() function is useful if you need both the item and the item’s index in the loop’s block.

>>> supplies = ['pens', 'staples', 'flamethrower', 'binders']
>>> supplies
['pens', 'staples', 'flamethrower', 'binders']
>>> for index, item in enumerate(supplies):
	print('Index ' + str(index) + ' in supplies is: ' + item)

	
Index 0 in supplies is: pens
Index 1 in supplies is: staples
Index 2 in supplies is: flamethrower
Index 3 in supplies is: binders

- Using the random.choice() and random.shuffle() Functions with Lists
The random module has a couple functions that accept lists for arguments. 

The random.choice() function will return a randomly selected item from the list.

>>> import random
>>> pets = ['Dog', 'Cat', 'Moose']
>>> random.choice(pets)
'Moose'
>>> random.choice(pets)
'Dog'
>>> random.choice(pets)
'Cat' 

You can consider random.choice(someList) to be a shorter form of someList[random.randint(0, len(someList) – 1].
>>> pets[random.randint(0, len(pets) - 1)]
'Cat'
>>> pets[random.randint(0, len(pets) - 1)]
'Moose'
>>> pets[random.randint(0, len(pets) - 1)]
'Moose'
>>> pets[random.randint(0, len(pets) - 1)]
'Dog'
>>> pets[random.randint(0, len(pets) - 1)]
'Cat'

The random.shuffle() function will reorder the items in a list. This function modifies the list in place, rather than returning a new list.

>>> people = ['Alice', 'Bob', 'Carol', 'David']
>>> people
['Alice', 'Bob', 'Carol', 'David']
>>> random.shuffle(people)
>>> people
['David', 'Carol', 'Bob', 'Alice']
>>> random.shuffle(people)
>>> people
['David', 'Carol', 'Alice', 'Bob']
>>> random.shuffle(people)
>>> people
['David', 'Bob', 'Alice', 'Carol']

-----------------------------------------------------------------------------------------------------------------
List Methods: A method is the same thing as a function, except it is called on a value. 
For example, if a list value were stored in spam, you would call the index() list method on that list like so: spam.index('hello'). The method part comes after the value, separated by a period.

- Finding a Value in a List with the index() Method
index() --> gives the index of a value --> list.index(value)

>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> spam
['hello', 'hi', 'howdy', 'heyas']
>>> spam.index('hello')
0

>>> spam.index('howdy howdy howdy')
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    spam.index('howdy howdy howdy')
ValueError: 'howdy howdy howdy' is not in list

When there are duplicates of the value in the list, the index of its first appearance is returned.

>>> spam = ['Zophie', 'Pooka', 'Fat-tail', 'Pooka']
>>> spam.index('Pooka')
1

- Adding Values to Lists with the append() and insert() Methods.
To add new values to a list, use the append() and insert() methods.

append() --> add a values at the end of a list --> listname.append(value)

>>> spam = ['cat', 'dog', 'bat']
>>> spam.append('moose')
>>> spam
['cat', 'dog', 'bat', 'moose']

insert() --> inserts a value at a given position in a list. --> list.insert(index, value)

>>> spam
['cat', 'dog', 'bat', 'moose']
>>> spam
['cat', 'chicken', 'dog', 'bat']
>>> 

** Notice that the code is spam.append('moose') and spam.insert(1, 'chicken'), not spam = spam.append('moose') and spam = spam.insert(1, 'chicken'). Neither append() nor insert() gives the new value of spam as its return value. 
In fact, the return value of append() and insert() is None, so you definitely wouldn’t want to store this as the new variable value. Rather, the list is modified in place.

Methods belong to a single data type. The append() and insert() methods are list methods and can be called only on list values, not on other values such as strings or integers. 

>>> eggs = 'hello'
>>> eggs.append('world')
Traceback (most recent call last):
  File "<pyshell#66>", line 1, in <module>
    eggs.append('world')
AttributeError: 'str' object has no attribute 'append'
>>> bacon = 42
>>> bacon.insert(1, 'world')
Traceback (most recent call last):
  File "<pyshell#68>", line 1, in <module>
    bacon.insert(1, 'world')
AttributeError: 'int' object has no attribute 'insert'


- Removing Values from Lists with the remove() Method.

remove() --> remove a value from a list --> listname.remove('value')

>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam.remove('bat')
>>> spam
['cat', 'rat', 'elephant']

Attempting to delete a value that does not exist in the list will result in a ValueError error.

>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam.remove('chicken')
Traceback (most recent call last):
  File "<pyshell#80>", line 1, in <module>
    spam.remove('chicken')
ValueError: list.remove(x): x not in list

If the value appears multiple times in the list, only the first instance of the value will be removed. 

>>> spam = ['cat', 'bat', 'rat', 'hat', 'cat']
>>> spam.remove('cat')
>>> spam
['bat', 'rat', 'hat', 'cat']

The del statement is good to use when you know the index of the value you want to remove from the list. The remove() method is useful when you know the value you want to remove from the list.

>>> del spam[3]
>>> spam
['bat', 'rat', 'hat']

- Sorting the Values in a List with the sort() Method
sort() --> Srot the list values
	- listname.sort(reverse = True)
	- Sort uses ASCII-betical order. Upper case comes before lower case. 
	- listname.sort(key = str.lower)

>>> spam = [2, 5, 3,14, 1, -7]
>>> spam.sort()
>>> spam
[-7, 1, 2, 3, 5, 14]
>>> spam = ['ants', 'cats', 'dogs', 'badgers', 'elephant']
>>> spam
['ants', 'cats', 'dogs', 'badgers', 'elephant']
>>> spam.sort()
>>> spam
['ants', 'badgers', 'cats', 'dogs', 'elephant']

You can also pass True for the reverse keyword argument to have sort() sort the values in reverse order.

>>> spam.sort(reverse = True)
>>> spam
['elephant', 'dogs', 'cats', 'badgers', 'ants']

There are three things you should note about the sort() method. 
	First, the sort() method sorts the list in place; don’t try to capture the return value by writing code like spam = spam.sort().
	Second, you cannot sort lists that have both number values and string values in them, since Python doesn’t know how to compare these values.

>>> spam = [1, 3, 2, 4, 'Alice', 'Bob']
>>> spam.sort()
Traceback (most recent call last):
  File "<pyshell#113>", line 1, in <module>
    spam.sort()
TypeError: '<' not supported between instances of 'str' and 'int'

	Third, sort() uses “ASCIIbetical order” rather than actual alphabetical order for sorting strings. This means uppercase letters come before lowercase letters.Therefore, the lowercase a is sorted so that it comes after the uppercase Z.

>>> spam = ['Alice', 'ants', 'Bob', 'badgers', 'Carol', 'cats']
>>> spam
['Alice', 'ants', 'Bob', 'badgers', 'Carol', 'cats']
>>> spam.sort()
>>> spam
['Alice', 'Bob', 'Carol', 'ants', 'badgers', 'cats']

If you need to sort the values in regular alphabetical order, pass str.lower for the key keyword argument in the sort() method call.

>>> spam
['a', 'z', 'A', 'Z']
>>> spam.sort(key = str.lower)
>>> spam
['a', 'A', 'z', 'Z']

This causes the sort() function to treat all the items in the list as if they were lowercase without actually changing the values in the list.

- Reversing the Values in a List with the reverse() Method.

If you need to quickly reverse the order of the items in a list, you can call the reverse() list method. 

>>> spam = ['cat', 'dog' , 'moose']
>>> spam.reverse()
>>> spam
['moose', 'dog', 'cat']

Like the sort() list method, reverse() doesn’t return a list. This is why you write spam.reverse(), instead of spam = spam.reverse().


You can also split up a single instruction across multiple lines using the \ line continuation character at the end. Think of \ as saying, “This instruction continues on the next line.” The indentation on the line after a \ line continuation is not significant.

>>> print('Four Score and seven ' + \
      'years ago...')
Four Score and seven years ago...
>>> 


