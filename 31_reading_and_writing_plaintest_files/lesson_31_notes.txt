The File Reading Writing Process
-----------------------------------
Plaintext files contain only basic text characters and do not include font, size, or color information. Text files with the .txt extension or Python script files with the .py extension are examples of plaintext files. 
programs can easily read the contents of plaintext files and treat them as an ordinary string value.

Binary files are all other file types, such as word processing documents, PDFs, images, spreadsheets, and executable programs.  If you open a binary file in Notepad or TextEdit, it will look like scrambled nonsense.


There are three steps to reading or writing files in Python.

1. Call the open() function to return a File object.

2. Call the read() or write() method on the File object.

3. Close the file by calling the close() method on the File object.



Opening files with the open() function
---------------------------------------
To open a file with the open() function, you pass it a string path indicating the file you want to open; it can be either an absolute or relative path. The open() function returns a File object.

>>> helloFile = open(r'C:\Users\himan\OneDrive\Documents\Interview_Prep\My_Learning_Cognizant\atbswpython\atbswp_python_programming\31_reading_and_writing_plaintest_files')

Both these commands will open the file in “reading plaintext” mode, or read mode for short. When a file is opened in read mode, Python lets you only read data from the file; you can’t write or modify it in any way. Read mode is the default mode for files you open in Python. 

You can explicitly specify the mode by passing the string value 'r' as a second argument to open().

>>> helloFile = open('C:\\Users\\himan\\OneDrive\\Documents\\Interview_Prep\\My_Learning_Cognizant\\atbswpython\\atbswp_python_programming\\31_reading_and_writing_plaintest_files\\hello.txt', 'r')

The call to open() returns a File object. A File object represents a file on your computer; it is simply another type of value in Python, much like the lists and dictionaries you’re already familiar with. Now, whenever you want to read from or write to the file, you can do so by calling methods on the File object in helloFile.

Reading contents of files
---------------------------

If you want to read the entire contents of a file as a string value, use the File object’s read() method.

>>> helloContent = helloFile.read()
>>> helloContent
'Hello World!'
>>> 

If you think of the contents of a file as a single large string value, the read() method returns the string that is stored in the file.

Alternatively, you can use the readlines() method to get a list of string values from the file, one string for each line of text. 

>>> sonnetFile = open('sonnet29.txt')
>>> sonnetFile.readlines()
["When, in disgrace with fortune and men's eyes,\n", 'I all alone beweep my outcast state,\n', 'And trouble deaf heaven with my bootless cries,\n', 'And look upon myself and curse my fate,']
>>> 

Each of the string values ends with a newline character, \n, except for the last line of the file. A list of strings is often easier to work with than a single large string value.


Writing to files
------------------

Python allows you to write content to a file in a way similar to how the print() function “writes” strings to the screen. You can’t write to a file you’ve opened in read mode, though. Instead, you need to open it in “write plaintext” mode or “append plaintext” mode, or write mode and append mode for short.

Write mode will overwrite the existing file and start from scratch, just like when you overwrite a variable’s value with a new value.Pass 'w' as the second argument to open() to open the file in write mode. 

Append mode, on the other hand, will append text to the end of the existing file. You can think of this as appending to a list in a variable, rather than overwriting the variable altogether. Pass 'a' as the second argument to open() to open the file in append mode.

If the filename passed to open() does not exist, both write and append mode will create a new, blank file.

After reading or writing a file, call the close() method before opening the file again.

>>> baconfile = open('bacon1.txt', 'w')
>>> baconfile.write('Hello World!\n')
13
>>> baconfile.close()

>>> baconFile = open('bacon1.txt', 'w')
>>> baconFile.write('Hello World!\n')
13
>>> baconFile.close()
>>> 
>>> baconFile = open('bacon1.txt', 'a')
>>> baconFile.write('Bacon is not a vagetable.')
25
>>> baconFile.close()
>>> 
>>> baconFile = open('bacon1.txt', 'r')
>>> content = baconFile.read()
>>> print(content)
Hello World!
Bacon is not a vagetable.


>>> baconFile = open('bacon1.txt', 'r')
>>> content = baconFile.readlines()
>>> print(content)
['Hello World!\n', 'Bacon is not a vagetable.']
>>> baconFile.close()


Saving variables with the SHELVE module
-------------------------------------------
You can save variables in your Python programs to binary shelf files using the shelve module. This way, your program can restore data to variables from the hard drive. The shelve module will let you add Save and Open features to your program.

For example, if you ran a program and entered some configuration settings, you could save those settings to a shelf file and then have the program load them the next time it is run.

>>> import shelve
>>> shelfFile = shelve.open('mydata')
>>> cats = ['Zoophie', 'Pooka', 'Simon']
>>> shelfFile['cats'] = cats
>>> shelFile .close()

To read and write data using the shelve module, you first import shelve. Call shelve.open() and pass it a filename, and then store the returned shelf value in a variable. You can make changes to the shelf value as if it were a dictionary. When you’re done, call close() on the shelf value. Here, our shelf value is stored in shelfFile. 

After running the previous code on Windows, you will see three new files in the current working directory: mydata.bak, mydata.dat, and mydata.dir. On OS X, only a single mydata.db file will be created.

Your programs can use the shelve module to later reopen and retrieve the data from these shelf files. Shelf values don’t have to be opened in read or write mode—they can do both once opened. 

>>> shelfFile = shelve.open('mydata')
>>> type(shelfFile)
<class 'shelve.DbfilenameShelf'>
>>> shelffile['cats']
['Zoophie', 'Pooka', 'Simon']
>>> shelffile['other'] = ['name', 'phone']
>>> shelffile.close()
>>> shelffile = shelve.open('mydata')
>>> shelffile['cats']
['Zoophie', 'Pooka', 'Simon']
>>> shelffile['other']
['name', 'phone']

Just like dictionaries, shelf values have keys() and values() methods that will return list-like values of the keys and values in the shelf. Since these methods return list-like values instead of true lists, you should pass them to the list() function to get them in list form. 

>>> shelfFile = shelve.open('mydata')
>>> list(shelfFile.keys())
['cats', 'other']
>>> list(shelfFile.values())
[['Zoophie', 'Pooka', 'Simon'], ['name', 'phone']]
>>> shelfFile.close()
>>> 

Plaintext is useful for creating files that you’ll read in a text editor such as Notepad or TextEdit, but if you want to save data from your Python programs, use the shelve module.