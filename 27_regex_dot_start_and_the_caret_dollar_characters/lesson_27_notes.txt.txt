The Caret and Dollar Sign Characters
--------------------------------------

You can also use the caret symbol (^) at the start of a regex to indicate that a match must occur at the beginning of the searched text. 

>>> beginsWithHello = re.compile(r'^Hello')
>>> beginsWithHello.search('Hello worls!')
<re.Match object; span=(0, 5), match='Hello'>
>>> beginsWithHello.search('He said Hello.') == None
True
>>> 


Likewise, you can put a dollar sign ($) at the end of the regex to indicate the string must end with this regex pattern.

>>> endsWithNumber=re.compile(r'\d$')
>>> endsWithNumber.search('Your number is 42')
<re.Match object; span=(16, 17), match='2'>
>>> endsWithNumber.search('Your number is forty two.')==None
True
>>> 

And you can use the ^ and $ together to indicate that the entire string must match the regex

>>> wholeStringIsNum = re.compile(r'^\d+$')
>>> wholeStringIsNum.search('123456787899')
<re.Match object; span=(0, 12), match='123456787899'>
>>> wholeStringIsNum.search('123456x787899')
>>> wholeStringIsNum.search('123456x787899') == None
True
>>> wholeStringIsNum.search('123456 787899')==None
True
>>> 


The Wildcard Caharacter
--------------------------

The . (or dot) character in a regular expression is called a wildcard and will match any character except for a newline. 

>>> atRegex = re.compile(r'.at')
>>> atRegex.findall('The cat in the hat satg on the flat mat.')
['cat', 'hat', 'sat', 'lat', 'mat']


Remember that the dot character will match just one character, which is why the match for the text flat in the previous example matched only lat. 

>>> atRegex = re.compile(r'.{1,2}at')
>>> atRegex.findall('The cat in the hat satg on the flat mat.')
[' cat', ' hat', ' sat', 'flat', ' mat'] 

To match an actual dot, escape the dot with a backslash: \..

Matching Everything With Dot-Star
----------------------------------

You can use the dot-star (.*) to stand in for that “anything.” Remember that the dot character means “any single character except the newline,” and the star character means “zero or more of the preceding character.”

>>> name = 'First Name: Himangshu Last Name: Pal'
>>> name
'First Name: Himangshu Last Name: Pal'
>>> nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')
>>> nameRegex.findall(name)
[('Himangshu', 'Pal')]
>>> mo = nameRegex.search(name)
>>> mo.group(1)
'Himangshu'
>>> mo.group(2)
'Pal'

The dot-star uses greedy mode: It will always try to match as much text as possible.
To match any and all text in a non-greedy fashion, use the dot, star, and question mark (.*?). 

>>> nongreedyRegex = re.compile(r'<.*?>')
>>> mo = nongreedyRegex.search('<To serve man> for dinner.>')
>>> mo.group()
'<To serve man>'

>>> greedyRegex = re.compile(r'<.*>')
>>> mo = greedyRegex.search('<To serve man> for dinner.>')
>>> mo.group()
'<To serve man> for dinner.>'

In the non-greedy version of the regex, Python matches the shortest possible string: '<To serve man>'. In the greedy version, Python matches the longest possible string: '<To serve man> for dinner.>'.

Matching Newlines with the Dot Character
-------------------------------------------

The dot-star will match everything except a newline. By passing re.DOTALL as the second argument to re.compile(), you can make the dot character match all characters, including the newline character.

>>> prime = 'Serve the public. \nProtect the innocent. \nUphold the law.'
>>> print(prime)
Serve the public. 
Protect the innocent. 
Uphold the law.

>>> noNewlineRegex = re.compile(r'.*')
>>> noNewlineRegex.search(prime)
<re.Match object; span=(0, 18), match='Serve the public. '>
>>> noNewlineRegex.search(prime).group()
'Serve the public. '


>>> newlineRegex = re.compile(r'.*', re.DOTALL)
>>> newlineRegex.search(prime).group()
'Serve the public. \nProtect the innocent. \nUphold the law.'

The regex noNewlineRegex, which did not have re.DOTALL passed to the re.compile() call that created it, will match everything only up to the first newline character, whereas newlineRegex, which did have re.DOTALL passed to re.compile(), matches everything. This is why the newlineRegex.search() call matches the full string, including its newline characters.

Review of Regex Symbols
---------------------------

The ? matches zero or one of the preceding group.

The * matches zero or more of the preceding group.

The + matches one or more of the preceding group.

The {n} matches exactly n of the preceding group.

The {n,} matches n or more of the preceding group.

The {,m} matches 0 to m of the preceding group.

The {n,m} matches at least n and at most m of the preceding group.

{n,m}? or *? or +? performs a non-greedy match of the preceding group.

^spam means the string must begin with spam.

spam$ means the string must end with spam.

The . matches any character, except newline characters.

\d, \w, and \s match a digit, word, or space character, respectively.

\D, \W, and \S match anything except a digit, word, or space character, respectively.

[abc] matches any character between the brackets (such as a, b, or c).

[^abc] matches any character that isn’t between the brackets.

Case Incensitive Matching
-----------------------
Normally, regular expressions match text with the exact casing you specify
To make your regex case-insensitive, you can pass re.IGNORECASE or re.I as a second argument to re.compile().

>>> robocop = re.compile(r'robocop', re.IGNORECASE)
>>> robocop.search('RoboCop is part manm part machine, all cop.').group()
'RoboCop'
>>> robocop.search('ROBOCop is part manm part machine, all cop.').group()
'ROBOCop'
>>> robocop.search('Himangshu, why does your programming book talk about RoBoCoP so much?').group()
'RoBoCoP'
>>> 