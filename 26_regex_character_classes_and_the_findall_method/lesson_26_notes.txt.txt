The findall() method
----------------------

search() will return a Match object of the first matched text in the searched string.
search() returns a Match object only on the first instance of matching text.

>>> phoneRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneRegex.search('Cell: 415-555-9999 Work:212-555-0000')
>>> mo.group()
'415-555-9999'
>>> 

findall() method will return the strings of every match in the searched string.
findall() will not return a Match object but a list of strings—as long as there are no groups in the regular expression. Each string in the list is a piece of the searched text that matched the regular expression.

>>> phoneRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
['415-555-9999', '212-555-0000']

If there are groups in the regular expression, then findall() will return a list of tuples.
If there are groups in the regular expression, then findall() will return a list of tuples. Each tuple represents a found match, and its items are the matched strings for each group in the regex.

>>> phoneRegex = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)')
>>> phoneRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
[('415', '555', '9999'), ('212', '555', '0000')]

To summarize what the findall() method returns, remember the following:

- When called on a regex with no groups, such as \d\d\d-\d\d\d-\d\d\d\d, the method findall() returns a list of string matches, such as ['415-555-9999', '212-555-0000'].

- When called on a regex that has groups, such as (\d\d\d)-(\d\d\d)-(\d\d\d\d), the method findall() returns a list of tuples of strings (one string for each group), such as [('415', '555', '9999'), ('212', '555', '0000')].


Character Classes
-------------------

\d - Any numeric digit from 0 to 9.
\D - Any character that is not a numeric from 0 to 9.
\w - Any letter, numeric digit, or the underscore character. 
\W - Any character that is not a letter, numeric digit, or the underscore character. 
\s - Any space, tab, or newline character.
\S - Any character that is not a space, tab, or newline. 

\d is shorthand for the regular expression (0|1|2|3|4|5|6|7|8|9).
Character classes are nice for shortening regular expressions. The character class [0-5] will match only the numbers 0 to 5; this is much shorter than typing (0|1|2|3|4|5).

Note that while \d matches digits and \w matches digits, letters, and the underscore, there is no shorthand character class that matches only letters.Though you can use the [a-zA-Z] character class.

>>> xmasRegex = re.compile(r'\d+\s\w+')
>>> xmasRegex.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7 swans, 6 geese, 5 rings, 3 hens, 2 doves, 1 partridge')
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6 geese', '5 rings', '3 hens', '2 doves', '1 partridge']


Making your own character classes
-----------------------------------
There are times when you want to match a set of characters but the shorthand character classes (\d, \w, \s, and so on) are too broad.  You can define your own character class using square brackets. For example, the character class [aeiouAEIOU] will match any vowel, both lowercase and uppercase.

>>> vowelRegex = re.compile(r'[aieouAEIOU]')
>>> vowelRegex
re.compile('[aieouAEIOU]')
>>> vowelRegex.findall('Robocop eats food. BABY FOOD.')
['o', 'o', 'o', 'e', 'a', 'o', 'o', 'A', 'O', 'O']

You can also include ranges of letters or numbers by using a hyphen. For example, the character class [a-zA-Z0-9] will match all lowercase letters, uppercase letters, and numbers.

Note that inside the square brackets, the normal regular expression symbols are not interpreted as such. This means you do not need to escape the ., *, ?, or () characters with a preceding backslash. For example, the character class [0-5.] will match digits 0 to 5 and a period. You do not need to write it as [0-5\.].


By placing a caret character (^) just after the character class’s opening bracket, you can make a negative character class. A negative character class will match all the characters that are not in the character class.

>>> 
>>> consonantRegex = re.compile(r'[^aeiouAEIOU]')
>>> consonantRegex
re.compile('[^aeiouAEIOU]')
>>> consonantRegex.findall('RoboCop eats baby food. BABY FOOD.')
['R', 'b', 'C', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', ' ', 'B', 'B', 'Y', ' ', 'F', 'D', '.']
>>> 

Now, instead of matching every vowel, we’re matching every character that isn’t a vowel.

