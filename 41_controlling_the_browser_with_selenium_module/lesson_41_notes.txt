
Controlling the Browser with the Selenium Module
------------------------------------------------

The selenium module lets Python directly control the browser by programmatically clicking links and filling in login information, almost as though there were a human user interacting with the page. Using selenium, you can interact with web pages in a much more advanced way than with requests and bs4; but because it launches a web browser, it is a bit slower and hard to run in the background if, say, you just need to download some files from the web.

*** Still, if you need to interact with a web page in a way that, say, depends on the JavaScript code that updates the page, you’ll need to use selenium instead of requests.

A major “tell” to websites that you’re using a script is the user-agent string, which identifies the web browser and is included in all HTTP requests. For example, the user-agent string for the requests module is something like 'python-requests/2.21.0'. You can visit a site such as https://www.whatsmyua.info/ to see your user-agent string.

Using selenium, you’re much more likely to “pass for human” because not only is Selenium’s user-agent is the same as a regular browser (for instance, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0'), but it has the same traffic patterns: a selenium-controlled browser will download images, advertisements, cookies, and privacy-invading trackers just like a regular browser.

However, selenium can still be detected by websites, and major ticketing and ecommerce websites often block browsers controlled by selenium to prevent web scraping of their pages.

Starting a Selenium Controlled Browser
----------------------------------------

Install selenium by running pip install --user selenium from a command line terminal. 

Importing the modules for selenium is slightly tricky. Instead of import selenium, you need to run from selenium import webdriver. After that, you can launch the Firefox browser with selenium. 

>>> from selenium import webdriver
>>> browser = webdriver.Firefox(executable_path='C:\\Program Files\\Mozilla Firefox\\geckodriver.exe')
>>> type(browser)
<class 'selenium.webdriver.firefox.webdriver.WebDriver'>
>>> browser.get('https://inventwithpython.com')


If you encounter the error message “'geckodriver' executable needs to be in PATH.”, then you need to manually download the webdriver for Firefox before you can use selenium to control it. You can also control browsers other than Firefox if you install the webdriver for them.

For Firefox, go to https://github.com/mozilla/geckodriver/releases and download the geckodriver for your operating system. (“Gecko” is the name of the browser engine used in Firefox.) For example, on Windows you’ll want to download the geckodriver-v0.24.0-win64.zip link, and on macOS, you’ll want the geckodriver-v0.24.0-macos.tar.gz link. Newer versions will have slightly different links. The downloaded ZIP file will contain a geckodriver.exe (on Windows) or geckodriver (on macOS and Linux) file that you can put on your system PATH.

Driver for chrome - https://sites.google.com/a/chromium.org/chromedriver/downloads 
chromedriver.exe

Other major web browsers also have webdrivers available, and you can often find these by performing an internet search for “<browser name> webdriver”.

If you still have problems opening up a new browser under the control of selenium, it may be because the current version of the browser is incompatible with the selenium module. One workaround is to install an older version of the web browser—or, more simply, an older version of the selenium module. You can find the list of selenium version numbers at https://pypi.org/project/selenium/#history. Unfortunately, the compatibility between versions of selenium and a browser sometimes breaks, and you may need to search the web for possible solutions.

you might run pip install --user -U selenium==3.14.1.


Finding Elemts on the Page:
------------------------------

WebDriver objects have quite a few methods for finding elements on a page.

-> find_element_* - Return a single WebElement object, representing the first element on the page that matches your query. 

-> find_elements_* - Return a list of WebElement_* objects for every matching element on the page.

-> browser.find_element_by_class_name(name) - Elements that use the CSS class name
browser.find_elements_by_class_name(name) 

-> browser.find_element_by_css_selector(selector) - Elements that match the CSS selector
browser.find_elements_by_css_selector(selector)

-> browser.find_element_by_id(id) - Elements with a matching id attribute value
browser.find_elements_by_id(id)


-> browser.find_element_by_link_text(text) - <a> elements that completely match the text 					provided 
browser.find_elements_by_link_text(text)



-> browser.find_element_by_partial_link_text(text) - <a> elements that contain the text provided
browser.find_elements_by_partial_link_text(text)


-> browser.find_element_by_name(name) - Elements with matching name attribute value
browser.find_elements_by_name(name)


-> browser.find_element_by_tag_name(name) - Elements with a matching tag name (case-insensitive; an <a> element is matched by 'a' and 'A')
browser.find_elements_by_tag_name(name)

Once you have the WebElement object, you can find out more about it by reading the attributes or calling the below methods.


Except for the *_by_tag_name() methods, the arguments to all the methods are case sensitive. If no elements exist on the page that match what the method is looking for, the selenium module raises a NoSuchElement exception. If you do not want this exception to crash your program, add try and except statements to your code.


WEbElements attributes and methods -
-----------------------------------

tag_name - The tag name such as 'a' for an <a> element

get_attribute(name) - The value for the element's name attribute

text - The text within the element, such as 'hello' in <span>hello</span>

clear() - For text field or text area elements, clears the text typed into it

is_displayed() - Returns True if the element is visible; otherwise returns False

is_enabled() - For input elements, returns True if the element is enabled; otherwise returns False

is_selected() - For checkbox or radio button elements, returns True if the element is selected; otherwise returns False

location - A dictionary with keys 'x' and 'y' for the position of the element in the page





from selenium import webdriver

browser = webdriver.Firefox(executable_path = 'C:\\Program Files\\Mozilla Firefox\\geckodriver.exe')
browser.get('https://inventwithpython.com')

try:
    elem = browser.find_element_by_class_name('cover-thumb')

    print('Found <%s> element with that class name!' %(elem.tag_name))
except:
    print('Was not able to find an element with that name')








Clicking the element:
----------------------
WebElement objects returned from the find_element_* and find_elements_* methods have a click() method that simulates a mouse click on that element. 

This method can be used to follow a link, make a selection on a radio button, click a Submit button, or trigger whatever else might happen when the element is clicked by the mouse.

>>> browser = webdriver.Firefox(executable_path ='C:\\Program Files\\Mozilla Firefox\\geckodriver.exe')
>>> browser.get('https://inventwithpython.com')
>>> linkElem = browser.find_element_by_link_text('Read Online for Free')
>>> type(linkElem)
<class 'selenium.webdriver.firefox.webelement.FirefoxWebElement'>
>>> linkElem.click()


Filling Out and Submitting Forms:
----------------------------------
Sending keystrokes to text fields on a web page is a matter of finding the <input> or <textarea> element for that text field and then calling the send_keys()method.

>>> browser = webdriver.Firefox(executable_path = 'C:\\Program Files\\Mozilla Firefox\\geckodriver.exe')
>>> browser.get('https://login.metafilter.com')
>>> userElem = browser.find_element_by_id('user_name')
>>> userElem.send_keys('your_real_username_here')
>>> passwordElem = browser.find_element_by_id('user_pass')
>>> passwordElem.send_keys('your_real_password_here')
>>> passwordElem.submit()

Avoid putting your passwords in source code whenever possible. It’s easy to accidentally leak your passwords to others when they are left unencrypted on your hard drive. If possible, have your program prompt users to enter their passwords from the keyboard using the pyinputplus.inputPassword() function

Sending Special Keys:
------------------------
The selenium module has a module for keyboard keys that are impossible to type into a string value, which function much like escape characters. These values are stored in attributes in the selenium.webdriver.common.keys module. Since that is such a long module name, it’s much easier to run from selenium.webdriver.common.keys import Keys at the top of your program; if you do, then you can simply write Keys anywhere you’d normally have to write selenium.webdriver.common.keys.

Commonly used variables in the selenium.webdriver.common.keys - 

Keys.DOWN, Keys.UP, Keys.LEFT, Keys.RIGHT - The keyboard arrow keys

Keys.ENTER, Keys.RETURN - The Enter and Return keys

Keys.HOME, Keys.END, Keys.PAGE_DOWN, Keys.PAGE_UP - The Home, PageDown, PAgeUp keys

Keys.ESCAPE, Keys.BACK_SPACE, Keys.DELETE - The ESC, BACKSPACE, DELETE keys

Keys.F1, Keys.F2, ... , Keys.F12 - The F1 to F12 keys at the top of the keyboard

Keys.TAB - The TAB key


>>> from selenium import webdriver
>>> from selenium.webdriver.common.keys import Keys
>>> browser = webdriver.Firefox(executable_path = 'C:\\Program Files\\Mozilla Firefox\\geckodriver.exe')
>>> browser.get('https://nostarch.com')
>>> htmlElem = browser.find_element_by_tag_name('html')
>>> htmlElem.send_keys(Keys.END)
>>> htmlElem.send_keys(Keys.HOME)


The <html> tag is the base tag in HTML files: the full content of the HTML file is enclosed within the <html> and </html> tags. Calling browser.find_element_by_tag_name('html') is a good place to send keys to the general web page. This would be useful if, for example, new content is loaded once you’ve scrolled to the bottom of the page.


Clicking  Browser Buttons:
----------------------------
The selenium module can simulate clicks on various browser buttons as well through the following methods:

browser.back() Clicks the Back button.

browser.forward() Clicks the Forward button.

browser.refresh() Clicks the Refresh/Reload button.

browser.quit() Clicks the Close Window button.

More Information on Selenium
Selenium can do much more beyond the functions described here. It can modify your browser’s cookies, take screenshots of web pages, and run custom JavaScript. To learn more about these features, you can visit the selenium documentation at https://selenium-python.readthedocs.org/.