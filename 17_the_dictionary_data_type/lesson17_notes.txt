-----------------------
The Tuple Data Type:
-----------------------

- The tuple data type is almost identical to the list data type, except in two ways. First, tuples are typed with parentheses, ( and ), instead of square brackets, [ and ]. 

>>> eggs = ('hello', 42, 0.5)
>>> eggs[0]
'hello'
>>> eggs[1:3]
(42, 0.5)
>>> len(eggs)
3

- But the main way that tuples are different from lists is that tuples, like strings, are immutable. 
- Tuples cannot have their values modified, appended, or removed.

>>> eggs
('hello', 42, 0.5)
>>> eggs[1] = 99
Traceback (most recent call last):
  File "<pyshell#71>", line 1, in <module>
    eggs[1] = 99
TypeError: 'tuple' object does not support item assignment

- If you have only one value in your tuple, you can indicate this by placing a trailing comma after the value inside the parentheses. The comma is what lets Python know this is a tuple value.

>>> ('hello')
'hello'
>>> type('hello',)
<class 'str'>
>>> (('hello',))
('hello',)
>>> type(('hello',))
<class 'tuple'>
>>> type('hello')
<class 'str'>
>>> type(('hello'))
<class 'str'>

-  If you need an ordered sequence of values that never changes, use a tuple.
- A second benefit of using tuples instead of lists is that, because they are immutable and their contents don’t change, Python can implement some optimizations that make code using tuples slightly faster than code using lists.

----------------------------------------------------
Converting types with list() and tuple() functions: 
----------------------------------------------------

- The functions list() and tuple() will return list and tuple versions of the values passed to them.

>>> tuple(['cat','dog',5])
('cat', 'dog', 5)
>>> list(('cat', 'dog',))
['cat', 'dog']
>>> list(('cat', 'dog',5))
['cat', 'dog', 5]
>>> list(('hello'))
['h', 'e', 'l', 'l', 'o']
>>> tuple(['hello'])
('hello',)


----------------
References:
----------------

-  variables “store” strings and integer values. Technically, variables are storing references to the computer memory locations where the values are stored. 

>>> spam = 42
>>> cheese = spam
>>> spam = 100
>>> spam
100
>>> cheese
42

>>> cheese += 1
>>> cheese
101
>>> spam
100

When you assign 42 to the spam variable, you are actually creating the 42 value in the computer’s memory and storing a reference to it in the spam variable. When you copy the value in spam and assign it to the variable cheese, you are actually copying the reference. Both the spam and cheese variables refer to the 42 value in the computer’s memory. When you later change the value in spam to 100, you’re creating a new 100 value and storing a reference to it in spam. This doesn’t affect the value in cheese. 

Integers are immutable values that don’t change; changing the spam variable is actually making it refer to a completely different value in memory.

- But lists don’t work this way, because list values can change; that is, lists are mutable. 

>>> spam = [0, 1, 2,3,4,5]
>>> cheese = spam # The reference is being copied, not the list.
>>> cheese
[0, 1, 2, 3, 4, 5]
>>> cheese[1] = 'Hello!'
>>> cheese
[0, 'Hello!', 2, 3, 4, 5]
>>> spam
[0, 'Hello!', 2, 3, 4, 5]

The code touched only the cheese list, but it seems that both the cheese and spam lists have changed.

--------------------------------
Identity and the id() function:
--------------------------------

- All values in Python have a unique identity that can be obtained with the id() function.

>>> id('Howdy')
1758867750576

When Python runs id('Howdy'), it creates the 'Howdy' string in the computer’s memory. The numeric memory address where the string is stored is returned by the id() function.

- Like all strings, 'Howdy' is immutable and cannot be changed. If you “change” the string in a variable, a new string object is being made at a different place in memory, and the variable refers to this new string.

>>> bacon = 'Hello'
>>> id(bacon)
1758867985840
>>> bacon += 'world!' # A new string is made from 'Hello' and 'World!'.
>>> id (bacon)
1758867749488

- However, lists can be modified because they are mutable objects. The append() method doesn’t create a new list object; it changes the existing list object. We call this “modifying the object in-place.”

>>> eggs = ['cat', 'dog']
>>> id(eggs)
1758867984768
>>> eggs.append('moose')
>>> eggs
['cat', 'dog', 'moose']
>>> id(eggs)
1758867984768
>>> eggs = ['bat', 'rat', 'cow']
>>> eggs
['bat', 'rat', 'cow']
>>> id(eggs)
1758867750592
>>> cheese = eggs
>>> id(cheese)
1758867750592
>>> id(eggs)
1758867750592
>>> 

- If two variables refer to the same list (like spam and cheese in the previous section) and the list value itself changes, both variables are affected because they both refer to the same list. The append(), extend(), remove(), sort(), reverse(), and other list methods modify their lists in place.

>>> cheese.remove('bat')
>>> cheese
['rat', 'cow']
>>> id(cheese)
1758867750592
>>> id(spam)
1758865898176
>>> id(eggs)
1758867750592
>>> eggs
['rat', 'cow']

- Python’s automatic garbage collector deletes any values not being referred to by any variables to free up memory. You don’t need to worry about how the garbage collector works, which is a good thing: manual memory management in other programming languages is a common source of bugs.

- The extend() method adds the specified list elements (or any iterable) to the end of the current list.

>>> fruit = ['apple', 'banana', 'cherry']
>>> cars = ['Ford', 'BMW', ' Volvo']
>>> fruit.extend(cars)
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BMW', ' Volvo']

- list.extend(iterable)

>>> points = (1,4,5,9)
>>> fruit.extend(points)
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BMW', ' Volvo', 1, 4, 5, 9]

>>> name = 'Himangshu'
>>> fruit.extend(name)
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BMW', ' Volvo', 1, 4, 5, 9, 'H', 'i', 'm', 'a', 'n', 'g', 's', 'h', 'u']

>>> name = ['Himangshu']
>>> fruit.extend(name)
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BME', 'Volvo', 'Himangshu']
>>> fruit.extend('Himangshu')
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BME', 'Volvo', 'Himangshu', 'H', 'i', 'm', 'a', 'n', 'g', 's', 'h', 'u']
>>> fruit.extend(['Manisha'])
>>> fruit
['apple', 'banana', 'cherry', 'Ford', 'BME', 'Volvo', 'Himangshu', 'H', 'i', 'm', 'a', 'n', 'g', 's', 'h', 'u', 'Manisha']
>>> 

-------------------
Passing References:
-------------------
def eggs(someParameter):
    someParameter.append('Hello')


spam = [1,2,3]
eggs(spam)
print(spam)
        
>>> [1, 2, 3, 'Hello']

- Even though spam and someParameter contain separate references, they both refer to the same list. This is why the append('Hello') method call inside the function affects the list even after the function call has returned.

-----------------------------------------------------
The copy Module's copy() and deepcopy() functions:
-----------------------------------------------------

- Although passing around references is often the handiest way to deal with lists and dictionaries, if the function modifies the list or dictionary that is passed, you may not want these changes in the original list or dictionary value. 

- copy.copy(), can be used to make a duplicate copy of a mutable value like a list or dictionary, not just a copy of a reference. 

>>> import copy
>>> spam = ['A', 'B', 'C', 'D']
>>> id(spam)
2045081337088
>>> cheese = copy.copy(spam)
>>> id(cheese)
2045081337600
>>> cheese
['A', 'B', 'C', 'D']
>>> cheese [1] = 42
>>> spam
['A', 'B', 'C', 'D']
>>> cheese
['A', 42, 'C', 'D']
>>> 

Now the spam and cheese variables refer to separate lists, which is why only the list in cheese is modified when you assign 42 at index 1.

- shallow copy: A shallow copy creates a new object which stores the reference of the original elements.
So, a shallow copy doesn't create a copy of nested objects, instead it just copies the reference of nested objects.
copy.copy()

>>> cheese = [[1,2,3], [4,5,6]]
>>> spam = copy.copy(cheese)
>>> spam
[[1, 2, 3], [4, 5, 6]]
>>> cheese
[[1, 2, 3], [4, 5, 6]]
>>> cheese[1][1]=99
>>> cheese
[[1, 2, 3], [4, 99, 6]]
>>> spam
[[1, 2, 3], [4, 99, 6]]
>>> id(cheese)
2045113453440
>>> id(spam)
2045113581504

>>> cheese = [[1,2,3], [4,5,6]]
>>> import copy
>>> spam = copy.copy(cheese)
>>> spam
[[1, 2, 3], [4, 5, 6]]
>>> cheese
[[1, 2, 3], [4, 5, 6]]
>>> id(spam)
1672121013184
>>> id(cheese)
1672153041216
>>> id(spam[1])
1672116653056
>>> id(cheese[1])
1672116653056
>>> spam[1][2]=99
>>> spam
[[1, 2, 3], [4, 5, 99]]
>>> cheese
[[1, 2, 3], [4, 5, 99]]
>>> id(spam)
1672121013184
>>> id(cheese)
1672153041216
>>> id(spam[1])==id(cheese[1])

- deep copy: A deep copy creates a new object and recursively adds the copies of nested objects present in the original elements.
copy.deepcopy()

>>> cheese
[[1, 2, 3], [4, 99, 6]]
>>> spam
[[1, 2, 3], [4, 99, 6]]
>>> del cheese
>>> cheese = copy.deepcopy(spam)
>>> cheese
[[1, 2, 3], [4, 99, 6]]
>>> spam
[[1, 2, 3], [4, 99, 6]]
>>> spam[0][1] = 100
>>> spam
[[1, 100, 3], [4, 99, 6]]
>>> cheese
[[1, 2, 3], [4, 99, 6]]

If you make changes to any nested objects in original object spam, you’ll see no changes to the copy cheese.

Shallow and Deep Copy - good read - https://realpython.com/copying-python-objects/

----------------------------------------------------------------------------------------------------------------------

- Like a list, a dictionary is a mutable collection of many values. 
- But unlike indexes for lists, indexes for dictionaries can use many different data types, not just integers. 
- Indexes for dictionaries are called keys, and a key with its associated value is called a key-value pair.
- Dictionary is typed with braces, {}.

>>> myCat = {'size': 'fat', 'color': 'gray', 'disposition':'loud'}
>>> myCat
{'size': 'fat', 'color': 'gray', 'disposition': 'loud'}

This dictionary’s keys are 'size', 'color', and 'disposition'. The values for these keys are 'fat', 'gray', and 'loud', respectively.

- Accessing values: '

>>> myCat['size']
'fat'
>>> 'My cat has ' + myCat['color']+ 'fur.'
'My cat has grayfur.'
   
- Unlike lists, items in dictionaries are unordered.While the order of items matters for determining whether two lists are the same, it does not matter in what order the key-value pairs are typed in a dictionary. Because dictionaries are not ordered, they can’t be sliced like lists.

>>> spam = ['cats', 'dogs','moose']
>>> bacon  = ['dogs', 'moose','cats']
>>> spam == bacon
False


>>> eggs = {'name':'Zophie','species':'cat','age':8}
>>> eggs
{'name': 'Zophie', 'species': 'cat', 'age': 8}
>>> ham = {'species':'cat','age':8,'name':'Zophie'}
>>> ham
{'species': 'cat', 'age': 8, 'name': 'Zophie'}
>>> eggs == ham
True

- Though dictionaries are not ordered, the fact that you can have arbitrary values for the keys allows you to organize your data in powerful ways.

- Ordered Dictionarise --> While they’re still not ordered and have no “first” key-value pair, dictionaries in Python 3.7 and later will remember the insertion order of their key-value pairs if you create a sequence value from them. 

>>> eggs = {'name':'Zophie','species':'cat','age':'8'}
>>> eggs
{'name': 'Zophie', 'species': 'cat', 'age': '8'}
>>> list(eggs)
['name', 'species', 'age']
>>> list(eggs)
['name', 'species', 'age']
>>> ham = {'species':'cat','age':'8','name':'Zophie'}
>>> ham
{'species': 'cat', 'age': '8', 'name': 'Zophie'}
>>> list(ham)
['species', 'age', 'name']

The dictionaries are still unordered, as you can’t access items in them using integer indexes like eggs[0] or ham[2]. You shouldn’t rely on this behavior, as dictionaries in older versions of Python don’t remember the insertion order of key-value pairs.

For example, notice how the list doesn’t match the insertion order of the dictionary’s key-value pairs when I run this code in Python 3.5:

>>> spam = {}
>>> spam['first key'] = 'value'
>>> spam['second key'] = 'value'
>>> spam['third key'] = 'value'
>>> list(spam)
['first key', 'third key', 'second key']

- The keys(), values(), items() Methods
The values returned by "keys(), values(), items()" methods are not true lists: they cannot be modified and do not have an append() method. But these data types (dict_keys, dict_values, and dict_items, respectively) can be used in for loops. 

>>> spam = {'color':'red','age':42}
>>> spam
{'color': 'red', 'age': 42}
>>> for v in spam.values():
	print(v)

	
red
42

>>> for k in spam.keys():
	print(k)

	
color
age
>>> for i in spam.items():
	print(i)

	
('color', 'red')
('age', 42)
>>> 

>>> spam.keys()
dict_keys(['color', 'age'])
>>> spam.items()
dict_items([('color', 'red'), ('age', 42)])


- The values in the dict_items value returned by the items() method are tuples of the key and value.
>>> spam.values()
dict_values(['red', 42])

- If you want a true list from one of these methods, pass its list-like return value to the list() function. 

>>> list(spam.keys())
['color', 'age']
>>> list(spam.values())
['red', 42]
>>> list(spam.items())
[('color', 'red'), ('age', 42)]

- You can also use the multiple assignment trick in a for loop to assign the key and value to separate variables.

>>> for k,v in spam.items():
	print('Keys:'+k+' Value:'+str(v))

	
Keys:color Value:red
Keys:age Value:42

- 'in' and 'not' in operators can check whether a value exists in a list. You can also use these operators to see whether a certain key or value exists in a dictionary.

>>> spam
{'name': 'Zophie', 'age': 7}
>>> 'name' in spam.keys()
True
>>> 'Zophie' in spam.values()
True
>>> 'color' in spam.keys()
False
>>> 'color' not in spam.keys()
True
>>> 'color' in spam
False
>>> 'age' in spam.items()
False
>>> 

- The get() method --> It’s tedious to check whether a key exists in a dictionary before accessing that key’s value. Fortunately, dictionaries have a get() method that takes two arguments: the key of the value to retrieve and a fallback value to return if that key does not exist.

>>> picnicitems
{'apple': 5, 'cups': 2}
>>> 'I am bringing ' + str(picnicitems.get('cups', 0)) + ' cups'
'I am bringing 2 cups'
>>> 'I am bringing ' + str(picnicitems.get('eggs',0)) + ' eggs.'
'I am bringing 0 eggs.'
>>> 

Because there is no 'eggs' key in the picnicItems dictionary, the default value 0 is returned by the get() method. Without using get(), the code would have caused an error message. 

>>> 'I am briniging ' + str(picnicitems['eggs']) + ' eggs'
Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    'I am briniging ' + str(picnicitems['eggs']) + ' eggs'
KeyError: 'eggs'
>>> 

- The setdefault() Method --> You’ll often have to set a value in a dictionary for a certain key only if that key does not already have a value.

>>> spam
{'name': 'Zophie', 'age': 7}
>>> 'age' in spam
True
>>> if 'color' not in spam:
	spam['color'] = 'black'

	
>>> spam
{'name': 'Zophie', 'age': 7, 'color': 'black'}

The setdefault() method offers a way to do this in one line of code. The first argument passed to the method is the key to check for, and the second argument is the value to set at that key if the key does not exist.

>>> spam
{'name': 'Pooka', 'age': 5}
>>> spam.setdefault('color','black')
'black'
>>> spam
{'name': 'Pooka', 'age': 5, 'color': 'black'}
>>> spam.setdefault('color','white')
'black'
>>> spam
{'name': 'Pooka', 'age': 5, 'color': 'black'}

The first time setdefault() is called, the dictionary in spam changes to {'color': 'black', 'age': 5, 'name': 'Pooka'}. The method returns the value 'black' because this is now the value set for the key 'color'. When spam.setdefault('color', 'white') is called next, the value for that key is not changed to 'white', because spam already has a key named 'color'.


- Pretty Printing --> If you import the pprint module into your programs, you’ll have access to the pprint() and pformat() functions that will “pretty print” a dictionary’s values. This is helpful when you want a cleaner display of the items in a dictionary than what print() provides. When the program is run, the output looks much cleaner, with the keys sorted.The pprint.pprint() function is especially helpful when the dictionary itself contains nested lists or dictionaries.

If you want to obtain the prettified text as a string value instead of displaying it on the screen, call pprint.pformat() instead. The below two lines are equivalent to each other:

pprint.pprint(someDictionaryValue)
print(pprint.pformat(someDictionaryValue))

- Nested Dictionaries and Lists
Lists are useful to contain an ordered series of values, and dictionaries are useful for associating keys with values.

allGuests = {'Alice':{'apples':5, 'pretzels':12},
             'Bob':{'ham sandwiches':3, 'apples':2},
             'Carol':{'cups':3, 'apple pies':1}}

def totalBrought(guests, item):
    numBrought = 0
    for k, v in guests.items():
        numBrought = numBrought + v.get(item, 0)
    return numBrought

print('Number of things being brought:')
print('-Apples     '+str(totalBrought(allGuests,'apples')))
print('-Cups     '+str(totalBrought(allGuests,'cups')))
print('-Cakes     '+str(totalBrought(allGuests, 'cakes')))
print('-Ham Sandwiches     '+str(totalBrought(allGuests, 'ham sandwiches',)))
print('-Apple Pies     '+str(totalBrought(allGuests, 'apple pies')))


Number of things being brought:
-Apples     7
-Cups     3
-Cakes     0
-Ham Sandwiches     3
-Apple Pies     1

Inside the totalBrought() function, the for loop iterates over the key-value pairs in guests. Inside the loop, the string of the guest’s name is assigned to k, and the dictionary of picnic items they’re bringing is assigned to v. If the item parameter exists as a key in this dictionary, its value (the quantity) is added to numBrought. If it does not exist as a key, the get() method returns 0 to be added to numBrought.

- When you first begin programming, don’t worry so much about the “right” way to model data. As you gain more experience, you may come up with more efficient models, but the important thing is that the data model works for your program’s needs.

- By organizing a program’s values into data structures, you can create representations of real-world objects. 

